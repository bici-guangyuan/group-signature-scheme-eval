/*
 * This file is part of an unofficial ISO20008-2.2 sample implementation to
 * evaluate certain schemes for their applicability on Android-based mobile
 * devices. The source is licensed under the modified 3-clause BSD license,
 * see the readme.
 * 
 * The code was published in conjunction with the publication called 
 * "Group Signatures on Mobile Devices: Practical Experiences" by
 * Potzmader, Winter, Hein, Hanser, Teufl and Chen
 */

package org.iso200082.tests;


import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.iso200082.common.ecc.api.AsymmetricPairing;
import org.iso200082.common.ecc.api.Point;
import org.iso200082.common.ecc.elements.Fq2Element;
import org.iso200082.common.ecc.elements.FqElement;
import org.iso200082.common.ecc.fields.CurveField;
import org.iso200082.common.ecc.fields.towerextension.Fq;
import org.iso200082.common.ecc.fields.towerextension.Fq2;
import org.iso200082.common.ecc.pairings.Ate;
import org.iso200082.common.util.IntegerUtil;
import org.iso200082.mechanisms.m1.ds.M1SignatureKey;
import org.iso200082.mechanisms.m1.ds.group.M1PublicKey;
import org.iso200082.mechanisms.m1.ds.messages.M1MembershipCredential;


/**
 * Appendix E Test data
 * 
 * @author Klaus Potzmader <klaus-dot-potzmader-at-student-dot-tugraz-dot-at>
 */
public class TestData
{

  public static class M1
  {
    /*
     * The following methods just return BigIntegers from the testdata provided
     * in Annex E of the standard.
     */
    
    public static M1PublicKey getSamplePublicKey()
    {
      String n = 
      "72E3DD15 AA189A85 D8169EE3 78E2C310 773BDA0A 8C21813F A2309CBF BA0D8BD4" 
    + "64CA8774 070EE0B9 B6726805 D9D61D2D A52D0347 8447C6FF 5D297116 B5F83211" 
    + "C8FBB55A 89BEE236 A4856F26 13DE5531 27F8AD43 A1716E10 009346F6 31509055" 
    + "D5148DE1 5C3E107F B3F14B7F A15D4F15 4E59ED89 34B38A78 31AD0997 1871689B" 
    + "7364B08E 780EAED3 DF0326A1 204ABD56 EF9853AF 172FEC1D E53253CF 08C80B2C" 
    + "A25BE0B0 7AB8F661 DB1CBDC8 5E0A4E80 ED0671D3 25182293 07FDFB8B F8F77D0E" 
    + "33D5CBC1 C8A8A2AF C43261DD 2351E1BB 0E62D77B 9FB388CF C18EB5D6 36E23703" 
    + "503ECF2D D837D202 02678B4D C408AF9E 5580433E 61168CB3 DD877C3F 4CA4EDED";
      
      String a =
      "0F530B25 19C8AA74 B8E3E632 2E7F9617 8AB8BB3C 1FAFBC4B 0BAFA43D C2D45A9A" 
    + "16DB7C46 F4477DD5 C74B4FA8 37838BD4 3D6500C5 8DE91529 2EBBF49D 6A16BDA1" 
    + "889B75D0 C0E0383B C8F02881 F63A9144 DDCB2E39 424CEF64 CADB4D9B B08177B0" 
    + "C04DC0AD B656C4F5 2F12AC8F A17C9FCC 4A1EBDF9 859B263B 7FC817BD BB5034EB" 
    + "B84BD698 FB79FD7A 45008B1E 0843F34E 39839E95 304DC1F3 0A32952E 421D4288" 
    + "FC5E1001 AB16A37F 3AA6988A 13B6F6C6 D9568F3E 28A38657 45393F68 C843622B" 
    + "A878922B F5E5C309 36F93406 8DBA39E8 ECD30FB1 FF4E5EDC 6EC605ED DE227E3F" 
    + "4D54501B 6CA69D5F 572E2F56 AB0EDC22 A87AB7C6 7543C8D6 E465EC19 C51276D2";

      String a_0 = 
      "65451CF2 6AA403AD E92A9F13 A34152C8 041A9247 DB362D42 A60E5DBE A07E050F" 
    + "518737D9 8C16092B 47ECF4AB 075622A0 FDFC20A4 C4291174 2F76DF96 1D1E840E" 
    + "548A06FE 859CF811 E7AE7290 35ADA222 44C27516 27781334 6EF043FD AA9D0844" 
    + "8334240A 093B8DC6 0BFAF928 4AAF9177 BBBC49BA FD4D2830 F604C8DD 6C1A184D" 
    + "5087730C 99108452 3C30CD2A 3AFEBA32 D72DA861 F0377CD9 5B07F52A 32ED0D28" 
    + "3BF27F5C 3C3E4578 81E4BE7F 522F9522 F9670D3B C98AC2F2 291BEEEC 973A3479"
    + "D0A2D08E D4AEB51E BAAEC971 55F7E430 083955F8 A1610212 A2484FF8 74767056"
    + "27706C2A 877D1B13 25589D19 16681056 D5BE2A7B 502C2327 42873B48 07E4C1C1";
      
      String g = 
      "466402AF B01C8AE0 74BA7E6D 3EFF5CF1 AA754ACE F1B5FC45 C58ACCA1 4C84576A" 
    + "FCC09362 5EAF074F 723F3BED 8E552E62 5C334C6B CA179580 3C018B4B 8B9329F8" 
    + "1276DDDD 454E4318 6D8C4D9C 35C9DC07 70E1A1A0 EB27E5F2 17BAE6AD 1EE74712"
    + "BF21CA80 9FEA88BD 8D2F4B2A A9F50516 467AF41F 617F3DCF 8BEC54E0 B0DE32F0" 
    + "D1DFFBCE 434FB1D0 A6789FC7 381704E2 82EC8859 95017AB6 BBD8D627 88AEF089" 
    + "F973FC67 4192271D 3C64C750 07861325 579A63EC 60A7DBCF 23C921E5 B74CE2D3" 
    + "6F824562 D405FC8C 797EF97D BB6C1E8A 7B1F57EA B0E4D063 23C5F88C ABD3A6C0" 
    + "653BAFD1 155B6A69 37A62A07 9099FA11 6ACD068B EC7AE221 5010BFA0 AE861FC9";
      
      String h = 
      "13C4A935 45BD9A55 ABD12349 1F173DC1 75BBA355 58B5A9B4 31E22402 1EA2483D"
    + "1F9685EA 6552D0D7 8A4BA800 C12ED12F AC8458B7 B7FB2662 3C40244A 70710878"
    + "BE952AAC C3E35D93 C039EBEA 1F554473 C4904A9A A460C670 AACF7CE3 504C4916"
    + "ECFC08E2 528183D5 5DDC1AD1 EDCF645C 66ADD64B E6EF8953 F7690C41 E5643211"
    + "0982D6FE 27601EE8 8404081F 6010CB3D 034E467B F7356E48 51FCBA1B 566E3DAB"
    + "DCE9C1C8 E7276A23 04A0E066 44649BF8 CF938313 AE7F8494 F91BD3AF 2472EF3E"
    + "89B1D124 581002F0 B4124EF1 5AD5FB55 EFD78AF8 DCE73109 E4DE7504 EB458193" 
    + "A828A8F1 022FED61 D70D02C6 F6C805B0 E0C71546 8D269CCD 8809A16F 4C54154C";
      
      String b = 
      "3FC0A1C7 C715150C 7D0DF108 DF8A0528 FE4EC7A1 48A066A3 F156C3E8 467291B3" 
    + "55D47D60 00F010AB 6C341D90 C633870E 7B65BB4F 94BD7D07 9E80A8F4 55B8087B" 
    + "0D82ADB8 3DCB292B 79B59B8C 812341B2 593FD3B4 1D3A7A44 983BEAFC 8C97EB02" 
    + "FAF9B756 B188F365 9E65D07F 380E989D 658492BB 7AA5B7B4 141F36B8 090B0E0A" 
    + "6E8FD4E2 B24947C3 13FE7307 94A4CB36 E326909D E66FD924 84DB4A71 15DDC5D0" 
    + "9B1FD469 479EEE71 CF2B3313 D8208166 F2C15F4E F2DCCA79 3B7F8D27 4F5B5D85" 
    + "735E04B6 A0A3551C 9BA6EE02 496C8035 D00211E1 58F86460 C07199D4 8608C4A2" 
    + "58D937ED AEE23E51 7DF14162 72F5C72C 3EDCD55D 959ED4DA 05759D24 E3BE5823";
      
      return new M1PublicKey(IntegerUtil.fromHexString(n),
                                IntegerUtil.fromHexString(a),
                                IntegerUtil.fromHexString(a_0),
                                IntegerUtil.fromHexString(g),
                                IntegerUtil.fromHexString(h),
                                IntegerUtil.fromHexString(b));
    }
    
    public static M1SignatureKey getSampleSignatureKey()
    {
      String A = 
      "375B6697 828C1CB3 6FF9E3D9 7D7EA508 D34E09AF 40ACAC31 70757709 386A6613"
    + "8D76A861 1A0C9FED 306471C0 FBD0CE41 277AE81B 42F7CA20 CB231C99 F54E4DB1"
    + "305620E7 93E8AF3A EBD922DE 45FBC66D C5DB0A70 8E7001B3 3497CEB2 D74C5652"
    + "091977B9 C4CF5356 941CDFA5 A37FF2D5 807262FA B2284DAB 3B5E68AC A927882D"
    + "E4A4882F 48F999ED C49B38F8 D42A7CF8 1955E01F 4884CB69 40D746B6 A25ECD98"
    + "D61D351F 0D2B6A5F E9D3BD81 6521D350 AA47D3AE 6CC31A9D B354D300 5E143BEE"
    + "34C8B7D2 9381681E DA5D68A2 EA63AD4A A29CE58C D9F2B690 5B42CA9F 2651DFD6"
    + "D2E0AD8F 91E3A1B0 B9ACCF25 5C47BEE0 63306943 045373E3 B4FB53E0 5149C84D";
      
      String e = 
      "0000000F FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF"
    + "FFFFFCEB 723BB231 7D993CAD 5EE5F0C2 4F8FD30D 5446A56F";

      String x = 
      "04000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000"
    + "3E75531E 1AC338DD 9B150FBB F9B2F984 40A30BDF";

      return new M1SignatureKey(
             new M1MembershipCredential(IntegerUtil.fromHexString(A),
                                      IntegerUtil.fromHexString(e)),
             IntegerUtil.fromHexString(x));
    }
    
    public static BigInteger getSampleT1()
    {
      return IntegerUtil.fromHexString(
      "5C96F1C2 EDA116B5 6C5A28C3 8098950B DE084521 6E1A5FA2 0F985999 064FCCC1"
    + "9946B54C 9A21F41B D5713079 16C8BF52 10FFD01B C3C0BA65 09659C87 68B17137" 
    + "22845000 4843DCDE 201F9C01 C1A48948 A165A2E4 13CBC416 F657721B 4AB69F3D"
    + "92EC3039 E0E82620 03F69444 275C36FD 20A8DDB7 4BE29929 66A2DD7A 8663837E"
    + "05DD224A 8DA92BF4 1CD5F9F5 31DF5DCB 3112F0C4 229D7DDF B0FA13E4 5CB5B794"
    + "DCB40C2A 3E42D593 E13AD04F 8857D361 58BCE8E2 64C07A18 0C81AD49 B8EA3790"
    + "DE52B00F 5B403AA3 26307A79 29AEB630 53183B2F 59A6AB34 B45CB1C7 AE76F402" 
    + "FE9D7396 FA3A140F ABCF31A4 A6D1BE6C 55B89D4A 6B3A4DC1 51242787 56E7A4AF"
      );
    }
    
    public static BigInteger getSampleT2()
    {
      return IntegerUtil.fromHexString(
      "44F0115C EFF930AC 803726E6 614B46F9 20310BD1 68956D60 3E771237 7B512D02"
    + "CF04A986 943BB3F8 5F4C4D12 4438AF50 A1AD13C6 D7FF5666 74F2241F 6386CA60"
    + "55DF0BFB F5860275 C450CA14 FAD2D40B D57245F5 B029A009 AD7CFF15 66C57517"
    + "15591D64 93473277 9EA974C2 E21B3467 E42AA151 5BE575B6 686A666F B9ADD370"
    + "316007B3 312887E3 7BDDA993 049A09C0 C884AA55 FE752E20 BFB6CE7A 9F12F5A2"
    + "3D9053EC A7EB8823 21BC9B19 BFE59B4C D3BD32C0 C12A52A0 FD3C6B02 1386A207"
    + "1286E1AB 4614889C 941EE9D5 13A7B3C7 32B0718B 4BBFE878 A2793DAD C561A1B0" 
    + "3AA80A55 80004C58 1D390C69 2577875A A0324F75 05A89AE4 7AB61455 1F0B0550"
      );
    }
    
    public static BigInteger getSampleT3()
    {
      return IntegerUtil.fromHexString(
      "1910180E F5ED5B8B 166E43F2 CABBBBA9 038FCFA2 DBE9556A 54E8D5F8 523577DD"
    + "5AC89BBE 510809A3 B4B8A6B8 F8AC3A0E 9AE6B964 5EA1B41C 5E2577A7 0D080FE9"
    + "675DAED6 65796AC6 46CBC74B B4B2D427 A805C096 E4DEFAFB 707B4EC7 E3965EBE"
    + "7907F09F DEF70AD6 1CF8CBD4 39B3AD69 76EFDB7A E36C6CC0 1BACD171 090392C7"
    + "86453340 3A4AB456 A2E16DD9 B84A6C41 24870E87 DDC8578E 72E055CF DE15F7FB"
    + "C4A7000B C9CF666F 9B5877E4 8117708E 8B5071FB A2BBFE4F ED8D346D 25A19FBE"
    + "609D067C E946CD56 C6B4A81B 4A8089EA 90904077 4792631C B868E450 70427A48"
    + "16B6832E ACF5C5FF 864C4F3E 6B6F78D7 3683E379 B1186EAE C9C61F2D 7E6FB0C7"
      );
    }
    
    public static BigInteger getSampleT4()
    {
      return IntegerUtil.fromHexString(
      "2CD4FD7D 0B491E59 C73B5083 B64BA089 176B5C46 A20FB06D E1B104B6 1F248CB1"
    + "10F7C259 8C153A0C 8C9D5281 480B10CA 0C587174 573F70B2 C54B3C91 28CB0AE8"
    + "4155A699 D29C5028 796744C3 685AD22E 4425E2E8 9789DB76 FA1C0119 12817997"
    + "2460EDF1 0DC6B484 5F3CD951 A8348BEB 9C88FA17 579A710A D66C7E90 BA84B724"
    + "A3645C41 5DAC6939 0BB73E83 9B9ADFC3 F6118304 3BD249AF 4A14C058 8EE8B0D7"
    + "59487B11 D35EB9F0 DFEC0636 925EF3B3 BFE3CE98 72CF73CD DE2EEC2A A251B984"
    + "E206043F 9061F375 25491E18 3295C134 5500997D 7D74F92E ABA5915B BA993D12"
    + "6F9756F4 C8874899 F58D6F25 E28640A9 C3A8AE11 F1E56338 62C62308 4ADDD1FD"
      );
    }
    
    public static BigInteger getSampleW1()
    {
      return IntegerUtil.fromHexString(
      "903FF56B C8865FCB 058A162F F71734F5 6AA67822 CFFDFBBF 266D6EAD 3B81155A"
    + "4E317776 D9B2B351 59CD0C9E D8A3766B 9781EF3C 8CE19EBD 0DD2C5DD 45D5816D"
    + "6D5085A2 060CC78E 1D098071 7DF8D934 D439E460 1A360FFE 88C3841B C4D98091"
    + "CAB4726B 8691FCF6 FAABC40F 5938A9FE 01E7A93B A77AFEAA 29BB2D9E F7BCF534"
    + "BD895888 E1DEE337 9A647719 7D70944C 7F3A13E3 44F88E81 639DAC44 128439FA"
    + "79C05588 45375525 00C1D51D 56143961 740E394F 61C2DCED CE468A85 CB869825"
    + "95B80F52 F966A15B 4DEA4D12 359B8FAB D9277AD6 561974B7 2BB8D7E6 2785DC5F" 
    + "FF502DEF 7B1630BD 4A430084 CE13C685 0432A943 DDB1B767 2F1EA8E3 4E74B149"
      );
    }
    
    public static BigInteger getSampleW2()
    {
      return IntegerUtil.fromHexString(
      "3C596556 AA7E429B 1703FE21 BEE7D260 3092AD99 12FD90EA 6671B8EA A901BBA1"
    + "C5F2E3A0 0EA6CDAC 7B5A9E0E E3748AC3 09F69D51 D8B7F423 2D5237EA 34D6FC21" 
    + "9EE94387 1370974B 9B6C8E49 1E9A0C92 FF4D1C51 759891F0 1E5B9A5A 04AA5B64"
    + "4A228412 056C1D05 95F06020 8570587F 96D49E98 665CA6D3 866F8249 2FA2E1E9"
    + "0C87A891 6E15BF72 927C4446 E53E0F5A 09FD6D16 158B9016 0A726C13 9214A0D4"
    + "DF2FEAF6 AE223430 D97424C0 20209D49 131169D5 10EC35E6 41AEF4B7 B2B0CE8F"
    + "A8C73910 AD220D0A 168CD86F 8EA09187 12121EC6 4FA286AB E9DBA4C1 B1215D58"
    + "6E5F4E40 F9FFDAC3 F51AFBBE B1320B28 824F53B0 DE79FE63 9CD66590 CD56F2A6"
      );
    }
    
    public static BigInteger getSampleW3()
    {
      return IntegerUtil.fromHexString(
      "2763853E 200092FB 842CC54D A92B377B 4E2FD10F DEE0FB24 E5718D59 7AD0EF99"
    + "8023E2D1 424F817B 1ECF7017 C470878D 8FB5F2E8 694D11F6 631F075E 5B2617DA"
    + "99A8BCD6 BD6281D3 E86C58DC B4031BD8 A5756F4C 20794583 C1F61D83 FD81E025"
    + "7F160843 B38B4DD5 CE8423C2 3DBDD7BB C2CF698A 78D72132 442D3A83 D963D3DD"
    + "87538F97 3EBE1D0B B147C9F3 FAC8EE84 8D25EA64 004F1254 D325844B CBBE8424"
    + "06FE0120 A5E14703 9B246776 04875F24 9433CBE8 612A06D4 B817B0EA 66C8F3F7"
    + "80A35798 0425CC2A 8CE6A6A4 24BCFEF3 8F7F0697 E7A2ED23 6D59EB3D FFFCB69B"
    + "92EF74D2 33909BB1 31709001 1AE931AE 6E8C1A18 D96AAE32 BDF504CB E247570C"
      );
    }
    
    public static BigInteger getSampleR1()
    {
      return IntegerUtil.fromHexString(
      "0897F8E4 9394A6E1 BC625487 A21187A2 DA10383A 2AC272BC D80CDD35 A346363C"
    + "672CEF42 7A69C199 9E2F998E E40C3D39 3A250520"
      );
    }
    
    public static BigInteger getSampleR2()
    {
      return IntegerUtil.fromHexString(
      "000080FC 06D07109 8A6F7870 6F973875 EB851D99 15C3B5BB 656DFA7F 395066DB"
    + "8AE2223A B1D2E6C2 86778413 78F2F662 E3A694D6"
      );
    }
    
    public static BigInteger getSampleR3()
    {
      return IntegerUtil.fromHexString(
      "00000069 63C9FDDB E0BD59A0 6BE8CE73 3BEE8F55 EEAC8C12 63586346 F5628510"
    + "89C4C6D1 B323410C 350D8F1D 65433BC8 F5090639 9C57EE0F F5537A7C 510F1BED"
    + "C854DFE2 91970C9B F40A7D3A 0465BAE5 0A290176 1B935C5A D88641E6 DFDFF3DA"
    + "929BD6A9 AF1D7E28 D04D6676 32695AF6 EFE4F0CD 29C9394A A5594E0F 6C5292F7"
    + "D3085E44 AD9FDCD1 4F0FCB5A F7C15B1F F917E39A B685E634 6B3C8A58 2C65AF39"
    + "9201F20F C5286DB0 5CE5E069 BAD92CBE E80CFC35 8B0716AA 93334E71 C622EA15"
    + "DE2D4E90 39B4F2E6 52D2E942 7CD5FE33 B2139AA3 0A4FA342 4F575CB7 08F32014"
    + "E42083B0 C5FF3E7E A1FE46C7 3E22C48F B1AE2472 E7D5A375 4E6873A3 098FBA71"
    + "D24F7E5B BAFCDC9B 5D092619 326BDB7B 7B9D9EDD 3FA7D6BC F4BA414F BF3AB03C"
    + "E1D9C5B1 4BB6E2EE 9A39EFDB 9CB67682 EDD9574B 452F5C7F D40FD5AD 329C980B"
    + "7B4BF5AC FCB933C1 E5C5CF7C EE325304 DCE83663 563BE323 CC8BD21C"
      );
    }
    
    public static BigInteger getSampleR4()
    {
      return IntegerUtil.fromHexString(
      "0000003C 8FB37C34 73F651E0 1300DB3F 61BC5162 70FC2E62 417B13EE 07AB3813"
    + "4F458F4D C6B5163A B1FDEF00 8252A446 6B2E2D25 3678F22F B9034B1C 158AB04C"
    + "F47A72EA 4ED5F469 77BBC48E 1EBB6906 00BE40DB 460F0B27 A6A5FBCB 4648B7E1"
    + "8C9A03A7 F329EF53 9070AA9F 74CB2735 07A0A660 42C5A328 E829B282 31768FEF"
    + "7085973B 580F68B9 52B4B02B 8F8A894A 50277382 0E140885 5DCD5C53 84E401AD"
    + "C471E646 D02A1AF7 9366C86D 50655EE1 211AF90A 4FA2454A 6FB49379 0519E780"
    + "E9607154 33743550 43285DD8 E37F247F E3B4DF11 573E4C91 2B1677A0 14E71A45"
    + "0A8690EB D1836D9A 7DE9A132 26B9E50F 562F64E5 46233DF2 7CE4AD46 7A7884F0"
    + "E7641617 00B38DC3 A1A714CA B99EF98A 8D9D330F 37A81605 F33A5942 6BF4D16B"
    + "67734E1A C3C2F7C1 41DD9982 8BEFFC70 977A026D 9FAF50BB 2AFD9BC1 227E652C"
    + "6D9AC4DF 3C1A4DBC 8B465C82 205653DE AF2F1408 B620BE84 29BB887B"
      );
    }
    
    public static BigInteger getSampleR5()
    {
      return IntegerUtil.fromHexString(
      "0000003C 9621E1F7 CA5DE96C DCA4AEA4 C1737836 31E69FA4 B043B89E AF00749D"
    + "B6FEF425 ED3CB308 E5888F5D D466CCC3 82A7BB7D 8888ECEB 939324CF D93B1AB2"
    + "637AEC07 82D38F1E AA92033A 04D754E3 2501B00F 94DE953B A920F18D EBCE7B35"
    + "F916A8C7 05FA2A06 C0E1F8B4 113AFF82 082B7A8C 167C7CF8 7CC7A6DF AC908E2C"
    + "7C39AE54 8E3DF467 57C97E60 6443AA60 C286BFBD ADA8BDC7 658929D7 83328942"
    + "ADEDB7C0 4D85E20D 72066918 FF01D3E0 4994C0A5 387DCDAC 7AEA530A 6999C798"
    + "8AD99B43 7EB97788 8E5DA30C BA911F81 30216D42 E294C33A AB097285 7AE86A06"
    + "4A3A42D3 D9839BAC F473617F BEDFF35E 14546C4E 4098EC16 5258A309 585DDC7A"
    + "632E254C 6C2CC0E0 C3760A10 01BA6A9D D9DAE9EA 74BE20EC 49AB2568 B4DBC913"
    + "6A8E87BE BB286EDA 595BF8D9 2C386565 172FDBBA 492EDECA 01C08C16 2140D08B"
    + "F0D2235F C566365D E643A9D7 9ADFBE93 B0BCDCC0 99B48F66 4398E5FB"
      );
    }
    
    public static BigInteger getSampleR9()
    {
      return IntegerUtil.fromHexString(
      "08EE4D7F CB83E628 8FFFE433 7A4E6501 183249CC B3B5652F F5F80E11 EE67A097"
    + "60BB53F7 836C86E4 99FC68F8 D7CA04B8 8507BCF1 9402591E 6F39177C 8B2BA0A9"
    + "64A22088 25847FE7 644C5E3B DAD186B9 E9769DAA F4FFA74F DDB2D3EE 30913A7F"
    + "5F194D3C 38E62D4E C47D0D15 37BD1CE5 A51EB01A 6F7F8095 196B9E2C 84E73422"
    + "2DC41C5F CDBE2ECF 144BAB4D 98A29E08 AD551BD7 E3B6BC53 896DFA08 AC56D11D"
    + "17C88766 5E51D73D 63C78E17 4038927B 1B54138E FAC0EC23 1DFCF6CB DB8999EE"
    + "85F7EA55 384543E8 FABDE89F 1A28F6B2 FAF07BE3 690FB798 BB84EAEE D86E3909"
    + "7D4506D7 1C3ECAD4 BFFF4A7E 048A7AFA D874A576 DA3D87F1 DD853375 504EC9DD"
    + "326C148B E2383202 58CE6988 2357E719 37F77D1F 6B565D11 F272F222 1864CB97"
    + "1A10F637 A10BEE84 3A945447 42675D1B 8482B282 B2610E4C 194AC612 A324E539"
    + "76BD228F EA178985 5098BD20 496BD782 E937FC79 C51617E9 A175E20E 049ECAF0"
    + "9F6318B4 89E9F71C 51FCF1B6 0EDAC6F2 091BFAA7"
      );
    }
    
    public static BigInteger getSampleR10()
    {
      return IntegerUtil.fromHexString(
      "00EE6A20 56206A63 78E71D92 A4D96CAB C820D0BD 0B43A5A3 9E9CB7C9 681B92E5"
    + "BC4187C4 8A7092E3 20F0D654 DCF49D57 08A55292 A2BD27BA A7FAC208 234CB3D0"
    + "F6436D72 2DE31ACB 66410105 D688454C 6D2BDD33 AB3C98BC E53363E8 F52EC55C"
    + "E3ED40EB FB145B7C 63F7C5DD 74293B51 4DB2010A 55EF1AE3 FA319866 ED327FF8"
    + "E0A9A05A 07B446B1 50823FA4 B26F9DE4 1F1A4FEA 035B0675 FD7408FC 129106A5"
    + "2B81DC03 5A844549 0071D608 81F99946 FB864E56 FFBBE04C 216E9B2E 7ADD5791"
    + "A40751CF 0E6D8FBE E296FCAD 5D7DEBD6 F3CCC79A 4DC93242 A540583B 4CFDD854"
    + "565061C5 B4DB9FDD B336F735 05AAD762 B8230813 D09E21C7 20561690 1C3F4D6E"
    + "C89EF8CB D0E22EBF 28E00511 3B95172D 9E66BD60 97545BB8 B04A1442 D25FF5D5" 
    + "7AAC0350 4980AA5A 41F62DD1 7EE4B3A0 69F04861 EA51D8B0 9D83DC8A 53C251AC" 
    + "FE7D30B8 6D98D3E2 53A7AB48 F4FDD5CE 044F541E 4C774873 4FFEDDBD 13E94D98" 
    + "9B9CE959 A27CCAF0 2692AC8E A80C59CA D6FCDBD2"
      );
    }
    
    public static BigInteger getSampleC()
    {
      return IntegerUtil.fromHexString(
        "44F1BC8E 392071C2 AECCF97D 770758E9 15941091"
      );
    }
  }

  public static class M4
  {

    /*
     * The getBeuchat* methods return test data as used in the implementation
     * by Beuchat et al., see
     * http://homepage1.nifty.com/herumi/crypt/ate-pairing.html
     */
    
    public static <P> AsymmetricPairing<P> getBeuchatPairingData(Random rnd, Fq<P> Fq)
    {
      BigInteger b   = IntegerUtil.TWO;
      BigInteger xi0 = IntegerUtil.ONE;
      BigInteger xi1 = IntegerUtil.ONE;
      BigInteger q   = new BigInteger(
                           "16798108731015832284940804142231733909" +
                           "889187121439069848933715426072753864723");
      BigInteger r   = new BigInteger(
                           "16798108731015832284940804142231733909" +
                           "759579603404752749028378864165570215949");
      // it's not -5 as it states in the paper, it's -1
      // (see the implementation..)
      BigInteger beta  = new BigInteger("-1");
      BigInteger t     = new BigInteger("-4647714815446351873");
      
      return new Ate<P>(rnd, q, r, b, t, beta, xi0, xi1, Fq, true);
    }
        
    public static Map<String, BigInteger> getBeuchatCurveParameters()
    {
      Map<String, BigInteger> parammap = new HashMap<String, BigInteger>();
      parammap.put("b",   IntegerUtil.TWO);
      parammap.put("xi0", IntegerUtil.ONE);
      parammap.put("xi1", IntegerUtil.ONE);
      parammap.put("q", 
          new BigInteger("16798108731015832284940804142231733909" +
                         "889187121439069848933715426072753864723"));
      parammap.put("r", 
          new BigInteger("16798108731015832284940804142231733909" +
                         "759579603404752749028378864165570215949"));
      // it's not -5 as it states in the paper, it's -1
      // (see the implementation..)
      parammap.put("beta", IntegerUtil.ONE.negate());
      parammap.put("t", new BigInteger("-4647714815446351873"));
      return parammap;
    }
    
    public static <P> Point<FqElement<P>, Fq<P>>
    getBeuchatP1(CurveField<FqElement<P>, Fq<P>> field)
    {
      return field.getElementFromComponents(
        BigInteger.valueOf(2), 
        new BigInteger("1674089664187986334010777735358857514" +
                       "9660814923656713498672603551465628253431", 10));
    }
    
    public static <P> Point<FqElement<P>, Fq<P>>
    getBeuchatP2(CurveField<FqElement<P>, Fq<P>> field)
    {
      return field.getElementFromComponents(
          new BigInteger("1343848698481266582795264331378538712" +
              "7911349697151255879146972340858203091778", 10),
          new BigInteger("1274138931635220620082847936109312791" +
              "7015298445269456291074734498988157668221", 10));
    }
    
    public static <P> Point<Fq2Element<P>, Fq2<P>>
    getBeuchatQ1(CurveField<Fq2Element<P>, Fq2<P>> field)
    {
      return field.getElementFromComponents(
          new BigInteger("1323466468103368827140539623952435897" +
                         "4366484883419628236101274746557464997054", 10),
          new BigInteger("11347691494386824311357230151706543132" +
                         "011346014309658325337514955760433353199", 10),
          new BigInteger("942722457313094070576783774097738885139" +
                         "5498800066112237265227139877389298881", 10),
          new BigInteger("845214131650922465135368966935692856300" +
                         "0175149166480473836682926961687453514", 10));
    }
    
    public static <P> Point<Fq2Element<P>, Fq2<P>>
    getBeuchatQ2(CurveField<Fq2Element<P>, Fq2<P>> field)
    {
      return field.getElementFromComponents(
          new BigInteger("529918044270630678193804002914728381830" +
                         "8705141288620744338313273731299805815", 10),
          new BigInteger("157979305480958566076494621373025248837" +
                         "61892212429298307727251696384886639045", 10),
          new BigInteger("146821555664656126878555530284050111810" +
                         "16442868657350988232774125667855691350", 10),
          new BigInteger("167745968775838164702307779855700650667" +
                         "58171976339091353731418650582998086894", 10));
    }
  }
  
  public static class M5
  {    
    public static BigInteger getSampleP1()
    {
      return IntegerUtil.fromHexString(
      "C4728B13 4D6367AC F5237597 0C8F6C6F 3FC8F2C0 15225558 77F0875B D8F52547"
    + "B29C45F3 8497CD20 0FCA69FA 3B51137D 270D6E43 B9FB4D9E 7149C7A8 9E6FC52B"
      );
    }
    
    public static BigInteger getSampleP2()
    {
      return IntegerUtil.fromHexString(
      "F5912C12 576943C1 2182E9BA 721AF44D 3EB24401 19A4787E D62EC771 8D53D179"
    + "72DAF22F 0B8EA3E4 659BC08A F3C1EB66 3D813830 68AE9DAC 2B0DAB68 9EBECBCB"
      );
    }
    
    public static BigInteger getSampleN()
    {
      return IntegerUtil.fromHexString(
      "BC7105CC 0207C46B 8F10732D 97BF0C2F E410F50C 6B79AEA7 68AB94EA A67DA9DA"
    + "65FF0101 1DB263CA 530E74ED A590E7DD 7CD015A5 455CE962 FD477340 B9014C29"
    + "FDED582A 9535C3C6 0039D828 86D755A5 CEF4687B C15C8F85 06F2A083 B7B5E59D"
    + "F91AFFD3 371F6879 0F43B22A 67DBC6AC 8DE5D083 65183679 DA0D6D75 23E47219"
      );
    }
    
    public static BigInteger getSampleA0()
    {
      return IntegerUtil.fromHexString(
      "10A4AA61 0DF057A6 40E42291 0FA165EA 46774220 26CCD4D9 A19F7FF3 FC8E4E61"
    + "14E34C3C BD72385E DA6010D7 4CC0D370 C0BCC71E 69CEBE97 7BBFC07E 57E68CE6"
    + "42223E3E A14BD7EE EF09ADC7 BB2112D6 B905540C C25AA65B A78EB30B F27B702D"
    + "23D62F56 FB51D688 07A2B866 4C78FDB7 60E4A5D7 377DE475 C7DC385F 9961BB1F"
      );
    }
    
    public static BigInteger getSampleA1()
    {
      return IntegerUtil.fromHexString(
      "9AF65DE8 B26D27C3 DABB8667 87797522 9D6B52EC CA376B60 44D4737E 0C0CE9C4"
    + "14B466E2 226204D1 4658AED3 82DBF8BF ABD7C69A 90E947A6 9E6B165F 102EBD57"
    + "B5E04D8D 5C3A55BE 2C40929A BCEC6637 00777B8E 561CE99F A894F270 7F6D02A2"
    + "A0BDC0A9 D19D2812 56923C10 2A20D37A 1FA9CDE2 EC253DAB A9093CFB 5BEB9236"
      );
    }
    
    public static BigInteger getSampleA2()
    {
      return IntegerUtil.fromHexString(
      "92EB72CC 73B6FABA AD963859 5821FF57 574E9002 B6094441 9E1F4BCF 2BC5568B"
    + "18BAE51B 888FD457 28A7F369 4A0E9822 7A314374 9ECF5C88 8AAC9A99 2311DFF6"
    + "2EA1E5DF FAE0BF72 DD7BFA40 D8FA28CF 5BB220F5 F5052C00 319335E1 DBE30A23"
    + "30418B47 0DCF2F83 A735B6CA 95E6BAD9 827E67AC 92289E9C BEF4E77E A3B682EE"
      );
    }
    
    public static BigInteger getSampleB()
    {
      return IntegerUtil.fromHexString(
      "85B97490 2BA79FE1 1005CFC5 1E31F655 5434A59E 02A34BDE 07BC586A 1B815660"
    + "E421DA66 6626CE82 81158F20 3A781612 85F70C44 802DF4F5 322C2E13 5892B0B6"
    + "2968296D 2856B268 54BE8A86 54D30912 218F70B5 D05E3ADB 26D551B0 B5CCDA13"
    + "25A9186C 8693FA6A 6753C7CC 12E3C723 AF6086B6 136E3BA3 059B4620 D8326111"
      );
    }
    
    public static BigInteger getSampleW()
    {
      return IntegerUtil.fromHexString(
      "7429D36F 39BB19A9 D70AB651 23918060 50FF943C 3B571E40 A4951DCC 360D757A"
    + "C328D524 A49D7A48 05A93F31 6CF04065 778A6C00 6609B17C 717BBDA8 9852EF05"
    + "84406761 DBF91455 E519D589 EDF0D30F 92E23D53 05430F9B 12479268 97335813"
    + "A6A13D98 3431F26E C7EBB0E5 61F3F106 D558E18E D5A81D44 97439911 4DCF4DC5"
      );
    }
    
    public static BigInteger getSampleQ()
    {
      return IntegerUtil.fromHexString(
      "B32DF688 513664AE 1140F824 301CE778 217C9AAD"
      );
    }

    public static BigInteger getGroupGOrder()
    {
      return IntegerUtil.fromHexString(
          "B32DF688 513664AE 1141034A E8E96559 1DA38F43"
      );
    }
    
    public static <P> CurveField<FqElement<P>, Fq<P>> 
    getGroupG(Random rnd, Fq<P> field, boolean mixed_mode)
    {
      return new CurveField<FqElement<P>, Fq<P>>(rnd, 
          field,
          field.getElementFromComponents("A559B0E0588FEDF752A8" +
                                         "E99066E6F28FA2A81926"),
          field.getElementFromComponents("7C1EA8D284973DDF71E4" +
                                         "782CA06ABF7D8535B163"),
          getGroupGOrder(), BigInteger.ONE, mixed_mode
     );
    }
    
    public static <P> Point<FqElement<P>, Fq<P>>
    getSampleG(CurveField<FqElement<P>, Fq<P>> field)
    {
      return field.getElementFromComponents(
      IntegerUtil.fromHexString("A0F22B79 45A70BE2 64F5BF5D 05FA44BC C924A6F5"),
      IntegerUtil.fromHexString("6055AD8D 1A371676 65457EF6 F7AF00B2 31C58D61")
      );       
    }

    public static <P> FqElement<P> getSampleY1(Fq<P> Fq)
    {
      return Fq.getElementFromComponents(
          IntegerUtil.fromHexString(
            "8209EBE1 69FDF9EE 42DC00EC 8F80401D 4B6B9763"
          )
      );
    }

    public static <P> FqElement<P> getSampleY2(Fq<P> Fq)
    {
      return Fq.getElementFromComponents(
          IntegerUtil.fromHexString(
            "AED41C99 D021A81E BA13626C 269A310E 84F34E6C"
          )
      );
    }
    
    public static <P> Point<FqElement<P>, Fq<P>>
    getSampleY1Point(CurveField<FqElement<P>, Fq<P>> field)
    {
      return field.getElementFromComponents(
      IntegerUtil.fromHexString("055888FD 19A5E1CC 6E711218 478DA01B 3CC74267"),
      IntegerUtil.fromHexString("843D8699 56281896 60B7FCA5 6CD9EB55 BEDE13F3")
      );       
    }
    
    public static <P> Point<FqElement<P>, Fq<P>>
    getSampleY2Point(CurveField<FqElement<P>, Fq<P>> field)
    {
      return field.getElementFromComponents(
      IntegerUtil.fromHexString("6855CF69 7DC43B51 F9C0CA54 6F81F50D D3F9E115"),
      IntegerUtil.fromHexString("58D96EBD 67B43408 AB860940 9B2BDFC5 AD379BCF")
      );       
    }
    
    public static BigInteger getSampleXi()
    {
      return IntegerUtil.fromHexString(
      "096B6D8A B16450DD 322640DE E30806AB A72380B8 9F88875A 92976AF3 FE63CAEF"
    + "00866DAE 0AEDB5E6 92E5E6FC 1FA9E0BE 9B4B71E0 0B637BC0 56F68366 112E7D74"
    + "84FD8515 C0C5A760 BC7765F2 ED44159F 82A2163B 2089F17A EDBC342D 94CB4715"
    + "2AF9CDD4 61AE71A0 94D455A7 01D86DA4 E70681F7 97545EFB B132EA63 D743A6A6"
    + "9C1F0066 53A26292 FE950B20 1BA26A54 C2159AE8 332A13EF BD5CB73A"
      );
    }
    
    public static BigInteger getSampleAi()
    {
      return IntegerUtil.fromHexString(
      "BE3A25 96430AAA B48EA819 94A54E5F E150F9D0 E14AE868 FC93D743 9914B853"
    + "F712CCC4 1303554D 81D9028B 9F7726BB 2EEDDC2A 48BC80D5 B1DED4ED 1DFA9847"
    + "96FFF199 47226633 745152C6 6B342261 7D1CFDB9 ED66A52F 43ADFB4A 49C42900"
    + "64F5708A F86DD9F0 715AD701 EC2DB64F D9510F76 084FA8DE D39529A0 4EE119EC"
      );
    }
    
    public static BigInteger getSampleEiPrime()
    {
      return IntegerUtil.fromHexString(
      "017ECCE7 23FF93F5"
      );
    }
    
    public static BigInteger getSampleBi()
    {
      return IntegerUtil.fromHexString(
      "4691B234 C873C9BE 98568307 87603355 71463B9D 6FE70E2B ADE6C3AF FF2E5DBA"
    + "31CB568C 5EDDE398 F5629F3B A6FD1617 3BCE054C 2147F932 010FD305 45A81600"
    + "AF5D46FC 4DABCD9B C90BDB5E 1A1E6187 B3B6CDF6 CF401C41 73648A6D DD898BA5"
    + "87792BE0 29D19E77 F2B75899 95B2880B 1CC1B548 284ADAFB 63499DEF 5907278B"
      );
    }
    
    public static <P> Point<FqElement<P>, Fq<P>>
    getSampleHi(CurveField<FqElement<P>, Fq<P>> field)
    {
      return field.getElementFromComponents(
      IntegerUtil.fromHexString("4518BDDF ECFCDE01 1D773410 E364708B CEFD86DF"),
      IntegerUtil.fromHexString("8AC076DF 5F83F0B4 AA071A2E 06885254 BD97E8CE")
      );       
    }
    
    public static BigInteger getSampleXiPrime()
    {
      return IntegerUtil.fromHexString(
      "061EEA6B 26FAA61B C1CA23DF 36A2A670 0D864916 9D0A3765 CCFC8945 86E701D5"
    + "374B9973 FF171860 3EB23114 9B048205 71FC351D EC6E9DA6 92B88DFA 24967AEB"
    + "38D7CBE3 2F7CB5EE 2F56665D 74598717 51C4F7BA 393DBE0F 19AD70CE 1A8954DC" 
    + "ABED6AEB 2CF0A650 DDDD37DD E7FA29EA 619B4619 CC53EC42 CD624B9E A7246BDC"
    + "EF7566ED 5CC75E91 85A16F60 A88F6810 8AFFBE21 0981D34C 249D8A31"
      );
    }
    
    public static BigInteger getSampleXiDoublePrime()
    {
      return IntegerUtil.fromHexString(
      "034C831F 8A69AAC1 705C1CFF AC65603B 999D37A2 027E4FF4 C59AE1AE 777CC919"
    + "C93AD43A 0BD69D86 5433B5E7 84A55EB9 294F3CC2 1EF4DE19 C43DF56B EC980289"
    + "4C25B932 9148F172 8D20FF95 78EA8E88 30DD1E80 E74C336B D40EC35F 7A41F238"
    + "7F0C62E9 34BDCB4F B6F71DC9 19DE43BA 856B3BDD CB0072B8 E3D09EC5 301F3AC9"
    + "ACA99978 F6DB0401 78F39BBF 73130244 3715DCC7 29A840A3 98BF2D09"
      );
    }
    
    public static BigInteger getSampleC()
    {
      return IntegerUtil.fromHexString(
      "6E208796 89C180B6 7B9AE0AC 5116FDC8 300CDFEA 0E437793 0FB53C95 60736431"
    + "DDB768FB 235F613F 76A44259 9C960482 AA8ED381 AE3C5D08 B087DD17 231FC9A0"
    + "FAEC0736 CF0D7657 A0413EC2 F36FA9E8 9836BA2C 7C12BAFE 5913ED1B 9434CD81"
    + "5CF2DE17 7ADD702C 9894C0C1 F66C41D4 4E790879 B5F259BE 3A8383FE 90BC4CB1"
      );
    }
    
    public static BigInteger getSampleAiPrime()
    {
      return IntegerUtil.fromHexString(
      "91C44789 253105A7 D14B7123 4C73FB86 6B3522F5 C543D9C0 0A83EAA5 35C81E1A"
    + "68B98CF0 31D77CF3 572930A2 F9F85C42 5AB673C8 F7B6F9C4 9E97D169 C01C8702"
    + "9473DC31 A1A76449 0DB11DB2 C083B45D 7CA19AED AE0DBE93 B7EEF152 B8517C7D"
    + "E8FD2078 CCEB2044 6C5AC4F4 456C8114 01EB03B7 7094D79A E37467FF CC04318E"
      );
    }
    
    public static <P> Point<FqElement<P>, Fq<P>>
    getSampleE0(CurveField<FqElement<P>, Fq<P>> field)
    {
      return field.getElementFromComponents(
      IntegerUtil.fromHexString("4057644E 063743F4 F3A12C15 93F745D3 D7383C1B"),
      IntegerUtil.fromHexString("7EF24989 EFEA4D2C 0B34C752 028B8C5A 07735E91")
      );       
    }
    
    public static <P> Point<FqElement<P>, Fq<P>>
    getSampleE1(CurveField<FqElement<P>, Fq<P>> field)
    {
      return field.getElementFromComponents(
      IntegerUtil.fromHexString("9C4F01B8 293BA945 DF70435F 9FF4AF50 B15A52AB"),
      IntegerUtil.fromHexString("60970938 977FF31F CF0724AB 546C0856 F94F4C3F")
      );       
    }
    
    public static <P> Point<FqElement<P>, Fq<P>>
    getSampleE2(CurveField<FqElement<P>, Fq<P>> field)
    {
      return field.getElementFromComponents(
      IntegerUtil.fromHexString("B1D29A8F 3047EA63 FF45D35A F7C6D3C1 5CC512EF"),
      IntegerUtil.fromHexString("440A9E9D D775A1E7 FA4E0B07 E6F2E10F 18A1AE92")
      );       
    }
    
    public static BigInteger getSampleACom()
    {
      return IntegerUtil.fromHexString(
      "3C9E3686 BD8A737B 18F8C001 DB447140 932C22D2 CFF16A07 436B0C9C"
    + "D7A4ADCC 359339DC F9161C85 533ECCD1 40A33619 09B30FD1 9F57EE86"
    + "983D168F 7DD92571 9E91327E 64885FBD 65922911 18DAE05B 51E79242"
    + "A6C899F6 61619119 FAB1B282 333744CE 0E9206CD 81E5BB1C 488B349C"
    + "49179328 F22E1FAF 1B07ED1C 02C18B6C"
      );
    }
    
    public static BigInteger getSampleBCom()
    {
      return IntegerUtil.fromHexString(
      "3252A9E8 B3E9BAC5 22FDD692 03350BB5 BCECBA93 1181B5CE FD7F7395"
    + "A79E0C07 22033899 A539D3E3 C38DA3BD A85B2AA6 9A91C43C 592C83C2"
    + "4B63394B 8C62CCDA D9C8B15B 75B9F123 7291FAC5 8CAF3A1F DFB1DC06"
    + "FD1DC3F4 183AC1F4 E53A4F74 A488ECD3 C6ADBBAA 6B78676E 1B6B103B"
    + "B28AA33E C9DA0A82 E095599D 5AD93AD1"
      );
    }
    
    public static BigInteger getSampleHashC()
    {
      return IntegerUtil.fromHexString(
      "8A39EB36 D25CF1CC 13921BB7 294556F2 0B070E91"
      );
    }
    
    public static BigInteger getSampleTauX()
    {
      return IntegerUtil.fromHexString(
      "91D961 63B56FB9 C1F07D1F 060B7A2B 40AEAFD0 05A0DA6D B598A751 9252D68D"
    + "896E5B0F AFEBCF66 90FAA2A0 4D8FAC62 EF07F707 6D3E12CA 4A3F1556 D521B3DA"
    + "103F5F69 FA0764B0 7287F5CB 5A33A7BA CEA6DF78 0E95C72B F05171AE F750AF48"
    + "48788F47 7F692386 B2BCDE54 85D7DF5B 5A8A8978 6189ED17 CC9DE013 FB827836"
    + "C0BBE630 42A05DA3 27B1D03E 061064F9 42066EDF 213AFBDC B52A8E98 D787806F"
    + "2549E862 7BF60435 A81EABC0 5B0E55B4 2411C28B AA9B2F0D"
      );
    }
    
    public static BigInteger getSampleTauS()
    {
      return IntegerUtil.fromHexString(
      "05487C E6BCA419 064BDECB 349C1360 A62FB37B C0A300F3 19401FBB C60B12D9"
    + "286D55E7 D3E38B8E DD92B306 41608985 87D561B1 912A7BC9 54116E15 FE7FC0C3" 
    + "8487ECCD 7AA342AE 87233A90 01620B02 51FCBCFC CBDD2F7E 48ECC809 B3528EF6"
    + "D3A3B478 873D0834 29744CF7 9031B0A2 8F543E3D B527F5B3 DE2AA3A9 28FEB5D6"
    + "1CAD83DD ED439C88 159DD1D4 0E155923 B66EBAE9 4FE4EDF1 3175E2CE"
      );
    }
    
    public static BigInteger getSampleTauT()
    {
      return IntegerUtil.fromHexString(
      "830541 B18BE4EE D1FBE313 D4241E01 2A17F3B8 399867F9 5487A766 57E9E7B9"
    + "ADF2E2DB ADA69FB9 A93607B5 72E0EEE7 B4DE654B 3858F894 30A5ABF7 C65B9E2A"
    + "056F5239 7AE35EFD 72A25B09 1D9CA64E AB3B9E1A EB219CB8 FE382136 E64EB78F"
    + "1EA503C2"
      );
    }
    
    public static BigInteger getSampleTauEPrime()
    {
      return IntegerUtil.fromHexString(
      "487773 182405D6 0191A1C4 11C412E1 B6916B5C 65D8A9F6 B39FA82A 8EEC37C0"
    + "B3EDB5FB"
      );
    }
    
    public static BigInteger getSampleTauE()
    {
      return IntegerUtil.fromHexString(
      "A81030E5 81B57BAC 6844588F D9860A03 1145DB12"
      );
    }
    
    public static BigInteger getSampleEi()
    {
      return IntegerUtil.fromHexString(
      "800000 00000000 00000000 00000000 00000000 00000000 00000000 00000000"
    + "00000000 00000000 00000000 00000000 00000000 00000000 017ECCE7 23FF93F5"
      );
    }
    
    public static BigInteger getSampleS()
    {
      return IntegerUtil.fromHexString(
      "40B4B6 CA4D534C 8006027B 878CEF5A D67F1C58 E640FD5E 033679CA C8CD9CBE"
    + "525CCAF9 7B55CC1B B7948C23 D8ACA0BC 1E948FFB 6A5B95C0 B4CDCA46 E04F56E2"
    + "27CF0EEA 89DFAC3C 6C117744 248A8A93 9380B3E9 247B14A7 E642E510 BE0A1740"
    + "4E95D316 738756D1 0F6AE84A 0B31158E B5F6234C 55548B35 A93D407F 8B7240EB"
      );
    }
    
    public static BigInteger getSampleRhoE()
    {
      return IntegerUtil.fromHexString(
      "18287414 95717964 B262DF85 86FCC4D1 81D07793"
      );
    }
    
    public static BigInteger getSampleRhoM()
    {
      return IntegerUtil.fromHexString(
      "81696D94 9AA69900 0C04F70F 19DEB5AC FE38B1CC 81FABC06 6CF39591 9B397CA4"
    + "B995F2F6 AB98376F 291847B1 5941783D 291FF6D4 B72B8168 188EC101 D352555F"
      );
    }
    
    public static BigInteger getSampleRhoR()
    {
      return IntegerUtil.fromHexString(
      "E4946C9F B4DEFCD8 236ED484 92269CDC 5C1F16B2 00A21DA9 403B4F4F AD8C3053"
    + "349EF229 3DE30F5A C3D9F0D9 F3E9F4D0 9A44A5F3 0BF66F5D 80E52E06 1E59B238"
      );
    }
    
    public static BigInteger getSampleT()
    {
      return IntegerUtil.fromHexString(
      "0155CC6E BEF1ABC9 36729308 F4E9075B 13CAF958 2EDEEFE3 F9A735A9 F32AB029"
    + "D8901F58 97ECE5A0 2D458E75 1B1EAC7D 20CBEFC2 B03766DC F05C533C 4828B0A0"
    + "6F857E86 BAF5B798"
      );
    }
    
    public static BigInteger getSampleMuX()
    {
      return IntegerUtil.fromHexString(
      "91D961 63B56FB9 BCDA727F 3C94EFC8 B9328B4F 972C4F6B A7E927C7 AA0BD9D9"
    + "79EE456C 0B4F05FE 321FA976 4FF6F98D DA54D2F2 55834955 5D71267F 701E44C4"
    + "F03FD80F 832FD1D9 51846426 3E27EBEF 4594B39F 7B43EC59 DAD20EE1 8593F7A3"
    + "3C1622DF 66140AF8 18CE1D5D 2BA64ACC 0DA0EBC1 4DCB25E1 EDC06E69 E884D20D"
    + "E073182D 57B9DA9D 4DAB48C0 C290FD77 BE9428E0 F06B6128 07099423 0F3B4F40"
    + "F5184DD7 9C385B85 1F3B949D D0B35257 2F9F8129 D67C3B33"
      );
    }
    
    public static BigInteger getSampleMuS()
    {
      return IntegerUtil.fromHexString(
      "05487C E6BCA419 0628EEBC FB1C4342 3403FE93 C259969F 0E7D5DC3 408FE40E"
    + "407BA627 9B9C40CD 1AB4E015 8E7647B7 749C40FB 68F47643 3DD76642 FB49F566"
    + "92A92D35 44C68763 8CB9FF00 4FC40108 FE21626C FFC7BDCF 8E4C06D2 3396EA77"
    + "FF9A6E3C 148421CC 3E3A68AC F44E601B 4CA3AD9D D27190C9 FC00C83D 9CD5901C"
    + "5930B83F 927ABA37 DA15BE2A A170A366 135ECB38 860A6303 16C543B3"
      );
    }
    
    public static BigInteger getSampleMuEPrime()
    {
      return IntegerUtil.fromHexString(
      "487773 182405D6 00C2F0B4 20D35359 AFA292B2 80DC0D76 30C3947F 3CB061EA"
    + "C3608236"
      );
    }
    
    public static BigInteger getSampleMuT()
    {
      return IntegerUtil.fromHexString(
      "830541 B18BE4EE D143558B 90B1AD28 2CE8F67F B8B865D2 C5E3F969 5BE60AAE"
    + "B286958E 54A4C8E9 CB43FCB5 879529FD ADFCEF8C CD318E14 BFE906AE 9BDCD11B"
    + "3C52CA4A 3A791E3E ED544119 E7AE1E4E 57D777EC BFE13BA4 ACADA4B3 132265BA"
    + "3C45B6AA"
      );
    }
    
    public static BigInteger getSampleMuE()
    {
      return IntegerUtil.fromHexString(
      "4E52BAB4 1AF5F83E F503F0AF C0207A30 88650CA1"
      );
    }
  }
}
